print(dim(H1N1.df))
glimpse(H1N1.df)
summary(H1N1.df)
head(H1N1.df)
tail(H1N1.df)
unique.dates <- levels(H1N1.df$Update.Time)
length(unique.dates)
unique.dates
?addTiles
us_projection <- readRDS("~/Documents/covid/data/json/us_projection.Rds")
View(us_projection)
install.packages("here")
library(dplyr)
library(here)
library(leaflet)
library(sp)
H1N1.df <- here("Data", "Pandemic (H1N1) 2009.csv") %>%
read.csv()
print(dim(H1N1.df))
glimpse(H1N1.df)
summary(H1N1.df)
head(H1N1.df)
unique.dates <- levels(H1N1.df$Update.Time)
length(unique.dates)
unique.dates
leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles()
library(dplyr)
library(geojsonio)
library(here)
library(leaflet)
library(sp)
country.shapes <- here("Data", "countries.geojson") %>%
geojson_read(what = "sp")
View(country.shapes)
country.shapes %>%
leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles()
leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles()
country.shapes <- here("Data", "countries.geojson") %>%
geojson_read(what = "sp")
country.shapes
?map_leaf
country.shapes %>% map_leaf()
geojson_json(country.shapes)
leaflet(countries.shape, options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles()
leaflet(country.shapes, options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles()
leaflet(country.shapes, options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4)
leaflet(country.shapes) %>%
setView(-96.8, 39, 4)
leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles()
m <- country.shapes %>% map_leaf()
View(m)
m <- country.shapes %>% map_leaf()
m
m <- country.shapes %>%
map_leaf() %>%
setView(-96.8, 39, 4)
m
?filter
?select
country.shapes <- here("Data", "countries.geojson") %>%
geojson_read(what = "sp")
country.shapes$CASES <- H1N1.df %>% filter(Update.Time == "5/23/2009 8:00") %>% select(Cases)
H1N1.df %>% filter(Update.Time == "5/23/2009 8:00") %>% select(Cases)
CASES <- country.shapes$ADMIN
CASES$Cases <- 0
CASES[H1N1.df %>% filter(Update.Time == "5/23/2009 8:00") %>% select(Country)] <-
H1N1.df %>% filter(Update.Time == "5/23/2009 8:00") %>% select(Cases)
View(CASES)
CASES[[1]]
View(H1N1.df)
H1N1.df %>% filter(Update.Time == "5/23/2009 8:00") %>% select(Country)
CASES <- country.shapes$ADMIN
CASES$Cases <- 0
CASES[H1N1.df[Update.Time == "5/23/2009 8:00", "Country"]] <-
H1N1.df %>% filter(Update.Time == "5/23/2009 8:00") %>% select(Cases)
CASES <- country.shapes$ADMIN
CASES$Cases <- 0
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00", "Country"]] <-
H1N1.df %>% filter(Update.Time == "5/23/2009 8:00") %>% select(Cases)
View(CASES)
View(CASES)
CASES[[28]]
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00", "Country"]
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00", "Country"]]
country.shapes <- here("Data", "countries.geojson") %>%
geojson_read(what = "sp")
CASES <- country.shapes$ADMIN
CASES
CASES <- as.factor(country.shapes$ADMIN)
CASES$Cases <- 0
View(CASES)
?as.character.factor
?as.character
CASES <- as.character.factor(country.shapes$ADMIN)
CASES <- as.character.factor(country.shapes$ADMIN)
CASES <- as.factor(country.shapes$ADMIN)
CASES$Cases <- 0
View(CASES)
CASES <- as.factor(country.shapes$ADMIN)
CASES <- as.data.frame(as.factor(country.shapes$ADMIN))
View(CASES)
?as.data.frame
CASES <- as.data.frame(as.factor(country.shapes$ADMIN), row.names=c("Country"))
CASES <- as.data.frame(as.factor(country.shapes$ADMIN), col.names=c("Country"))
CASES$Cases <- 0
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00", "Country"]] <-
H1N1.df %>% filter(Update.Time == "5/23/2009 8:00") %>% select(Cases)
View(CASES)
CASES <- as.data.frame(as.factor(country.shapes$ADMIN), col.names=c("Country"))
View(CASES)
CASES <- as.data.frame(country.shapes$ADMIN, col.names=c("Country"))
View(CASES)
CASES <- as.data.frame(country.shapes$ADMIN, col.names="Country")
View(covid_data_states)
View(CASES)
CASES <- as.data.frame(as.factor(country.shapes$ADMIN))
colnames(CASES) <- c("Country"
)
View(CASES)
CASES$Cases <- 0
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00", "Country"]]
H1N1.df$Update.Time == "5/23/2009 8:00"
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00"]
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00"]
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00",]
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"],]
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"], "Cases"] <-
H1N1.df %>% filter(Update.Time == "5/23/2009 8:00") %>% select(Cases)
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"], "Cases"]
H1N1.df %>% filter(Update.Time == "5/23/2009 8:00") %>% select(Cases)
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"], "Cases"] <-
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Cases"]
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Cases"]
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"], "Cases"]
length(CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"], "Cases"])
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Cases"]
length(H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Cases"])
typeof(CASES$Cases)
typeof(H1N1.df$Cases)
View(CASES)
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"]
```{r}
CASES <- as.data.frame(country.shapes$ADMIN)
colnames(CASES) <- c("Country")
CASES$Cases <- 0
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"], "Cases"] <-
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Cases"]
H1N1.df$Country <- as.character(H1N1.df$Country)
View(H1N1.df)
CASES <- as.data.frame(country.shapes$ADMIN)
colnames(CASES) <- c("Country")
CASES$Cases <- 0
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"], "Cases"] <-
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Cases"]
View(CASES)
CASES <- as.data.frame(country.shapes$ADMIN)
colnames(CASES) <- c("Country")
rownames(CASES) <- CASES$Country
CASES$Cases <- 0
CASES <- CASES[,-1]
CASES
CASES <- as.data.frame(country.shapes$ADMIN)
colnames(CASES) <- c("Country")
rownames(CASES) <- CASES$Country
CASES$Cases <- 0
View(CASES)
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"], "Cases"] <-
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Cases"]
View(CASES)
country.shapes@data[["ADMIN"]]
sort(country.shapes$ADMIN)
library(dplyr)
library(geojsonio)
library(here)
library(leaflet)
library(sp)
library(dplyr)
library(geojsonio)
library(here)
library(leaflet)
library(sp)
H1N1.df <- here("Data", "Pandemic (H1N1) 2009.csv") %>%
read.csv()
H1N1.df$Country <- as.character(H1N1.df$Country)
print(dim(H1N1.df))
glimpse(H1N1.df)
summary(H1N1.df)
head(H1N1.df)
tail(H1N1.df)
unique.dates <- levels(H1N1.df$Update.Time)
length(unique.dates)
unique.dates
?filter
H1N1.df <- here("Data", "Pandemic (H1N1) 2009.csv") %>%
read.csv()
H1N1.df$Country <- as.character(H1N1.df$Country)
Grand.total.df <- H1N1.df %>% filter(Country == "Grand Total")
H1N1.df <- H1N1.df %>% filter(Country == -"Grand Total")
H1N1.df <- here("Data", "Pandemic (H1N1) 2009.csv") %>%
read.csv()
H1N1.df$Country <- as.character(H1N1.df$Country)
Grand.total.df <- H1N1.df %>% filter(Country == "Grand Total")
H1N1.df <- H1N1.df %>% filter(-(Country == "Grand Total")
print(dim(H1N1.df))
H1N1.df <- here("Data", "Pandemic (H1N1) 2009.csv") %>%
read.csv()
H1N1.df$Country <- as.character(H1N1.df$Country)
Grand.total.df <- H1N1.df %>% filter(Country == "Grand Total")
H1N1.df <- H1N1.df %>% filter(Country != "Grand Total")
print(dim(H1N1.df))
glimpse(H1N1.df)
summary(H1N1.df)
View(Grand.total.df)
head(H1N1.df)
tail(H1N1.df)
unique.dates <- levels(H1N1.df$Update.Time)
length(unique.dates)
unique.dates
country.shapes <- here("Data", "countries.geojson") %>%
geojson_read(what = "sp")
CASES <- as.data.frame(country.shapes$ADMIN)
colnames(CASES) <- c("Country")
rownames(CASES) <- CASES$Country
CASES$Cases <- 0
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"], "Cases"] <-
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Cases"]
leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles()
m <- country.shapes %>%
map_leaf() %>%
setView(-96.8, 39, 4)
m
View(CASES)
CASES <- as.data.frame(country.shapes$ADMIN)
colnames(CASES) <- c("Country")
rownames(CASES) <- CASES$Country
CASES$Cases <- 0
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Country"], "Cases"] <-
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Cases"]
View(CASES)
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00","Cases"]
H1N1.df[H1N1.df$Update.Time == "5/23/2009 8:00",]
View(H1N1.df)
H1N1.df$Update.Time == "5/23/2009 8:00"
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/09 8:00","Country"], "Cases"] <-
H1N1.df[H1N1.df$Update.Time == "5/23/09 8:00","Cases"]
View(CASES)
country.shapes$CASES <- CASES$Cases
View(country.shapes)
?colorNumeric
pal <- colorNumeric(
palette = "Heat",
domain = country.shapes$CASES
)
m <- country.shapes %>%
map_leaf() %>%
setView(-96.8, 39, 4) %>%
addPolygons(
stroke=FALSE,
smoothFactor = 0.2,
fillOpacity = 0.7,
color = ~pal(CASES)
)
m <- country.shapes %>%
map_leaf()  %>%
addPolygons(
stroke=FALSE,
smoothFactor = 0.2,
fillOpacity = 0.7,
color = ~pal(CASES)
)%>%
setView(-96.8, 39, 4)
m <- country.shapes %>%
leaflet()  %>%
addPolygons(
stroke=FALSE,
smoothFactor = 0.2,
fillOpacity = 0.7,
color = ~pal(CASES)
)%>%
setView(-96.8, 39, 4)
m
shiny::runApp('Documents/covid')
runApp('Documents/covid')
runApp()
runApp()
runApp()
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
shiny::runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
library(dplyr)
library(geojsonio)
library(here)
library(leaflet)
library(sp)
library(dplyr)
library(geojsonio)
library(here)
library(leaflet)
library(sp)
H1N1.df <- here("Data", "Pandemic (H1N1) 2009.csv") %>%
read.csv()
H1N1.df$Country <- as.character(H1N1.df$Country)
Grand.total.df <- H1N1.df %>% filter(Country == "Grand Total")
H1N1.df <- H1N1.df %>% filter(Country != "Grand Total")
glimpse(H1N1.df)
summary(H1N1.df)
head(H1N1.df)
unique.dates <- levels(H1N1.df$Update.Time)
length(unique.dates)
unique.dates
country.shapes <- here("Data", "countries.geojson") %>%
geojson_read(what = "sp")
CASES <- as.data.frame(country.shapes$ADMIN)
colnames(CASES) <- c("Country")
rownames(CASES) <- CASES$Country
CASES$Cases <- 0
CASES[H1N1.df[H1N1.df$Update.Time == "5/23/09 8:00","Country"], "Cases"] <-
H1N1.df[H1N1.df$Update.Time == "5/23/09 8:00","Cases"]
pal <- colorNumeric(
palette = "Reds",
domain = country.shapes$CASES
)
country.shapes$CASES <- CASES$Cases
m <- country.shapes %>%
leaflet()  %>%
addPolygons(
stroke=FALSE,
smoothFactor = 0.2,
fillOpacity = 0.7,
color = ~pal(CASES)
)%>%
setView(-96.8, 39, 4)
m
m2 <- leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4)
m2 <- leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4)
m2
m2 <- leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles()
m2 <- leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles()
m2
m2 <- leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles() %>%
addPolygons(
stroke=FALSE,
smoothFactor = 0.2,
fillOpacity = 0.7,
color = ~pal(CASES)
m2
m2 <- leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles() %>%
addPolygons(
stroke=FALSE,
smoothFactor = 0.2,
fillOpacity = 0.7,
color = ~pal(CASES))
m2 <- leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addPolygons(
stroke=FALSE,
smoothFactor = 0.2,
fillOpacity = 0.7,
color = ~pal(CASES))
m2 <- country.shapes %>%
leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles() %>%
addPolygons(
stroke=FALSE,
smoothFactor = 0.2,
fillOpacity = 0.7,
color = ~pal(CASES))
m2
?addTiles
?tileOptions
m2 <- country.shapes %>%
leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles(options = tileOptions(noWrap = TRUE)) %>%
addPolygons(
stroke=FALSE,
smoothFactor = 0.2,
fillOpacity = 0.7,
color = ~pal(CASES))
m2
?addProviderTiles
m2 <- country.shapes %>%
leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
#addTiles(options = tileOptions(noWrap = TRUE)) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light")) %>%
addPolygons(
stroke=FALSE,
smoothFactor = 0.2,
fillOpacity = 0.7,
color = ~pal(CASES))
m2
m2 <- country.shapes %>%
leaflet(options=leafletOptions(minZoom=2, maxZoom=18)) %>%
setView(-96.8, 39, 4) %>%
addTiles(options = tileOptions(noWrap = TRUE)) %>%
#addProviderTiles("MapBox", options = providerTileOptions(id = "mapbox.light")) %>%
addPolygons(
stroke=FALSE,
smoothFactor = 0.2,
fillOpacity = 0.7,
color = ~pal(CASES))
m2
shiny::runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
sudo systemctl restart shiny-server
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp()
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
?sidebarPanel
runApp('Documents/covid')
?id
?tags$id
?tags$div
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
?useShinyjs
runApp('Documents/covid')
runApp('Documents/covid')
?renderLeaflet
?renderPlot
?renderLeaflet
runApp('Documents/covid')
runApp()
runApp('Documents/covid')
?leafletOutput
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
shiny::runApp('Documents/covid')
shiny::runApp('Documents/covid')
View(covid_NY_counties.deaths)
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
shiny::runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
runApp('Documents/covid')
shiny::runApp('Documents/covid')
